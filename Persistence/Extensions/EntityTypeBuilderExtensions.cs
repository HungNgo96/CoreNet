using Domain.Core.Abstractions;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Persistence.Extensions;

internal static class EntityTypeBuilderExtensions
{
    /// <summary>
    /// Configures the base entity for a given entity type.
    /// </summary>
    /// <typeparam name="TEntity">The type of the entity.</typeparam>
    /// <param name="builder">The entity type builder.</param>
    internal static void ConfigureBaseEntity<TEntity>(this EntityTypeBuilder<TEntity> builder)
        where TEntity : EntityBase
    {
        // Sets the primary key for the entity to the Id property.
        builder.HasKey(entity => entity.Id);

        // Configures the Id property to be required (NOT NULL) and not generated by the database.
        builder
            .Property(entity => entity.Id)
            .IsRequired()
            .ValueGeneratedNever();

        builder.Property(entity => entity.CreatedOnUtc).IsRequired();

        builder.Property(entity => entity.CreatedBy).HasMaxLength(36).IsUnicode(false);

        builder.Property(entity => entity.ModifiedOnUtc).IsRequired(false);

        builder.Property(entity => entity.ModifiedBy).HasMaxLength(36).IsUnicode(false);

        // Ignores the DomainEvents property for the entity.
        _ = builder
            .Ignore(entity => entity.GetDomainEvents);
    }
}
